"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Select = Select;
exports.Option = Option;
exports.OptGroup = OptGroup;

var _ink = require("ink");

var _react = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function Select({
  children = [],
  stdin,
  onSubmit,
  unicode
}) {
  const cursorChar = _react.default.createElement(_ink.Text, {
    bold: true
  }, unicode ? '❯' : '>');

  const checkedChar = _react.default.createElement(_ink.Color, {
    green: true
  }, unicode ? '◉' : '[x]');

  const uncheckedChar = unicode ? '◯' : '[ ]';

  const _useState = (0, _react.useState)(new Set()),
        _useState2 = _slicedToArray(_useState, 2),
        selected = _useState2[0],
        setSelected = _useState2[1];

  const _useState3 = (0, _react.useState)(0),
        _useState4 = _slicedToArray(_useState3, 2),
        cursor = _useState4[0],
        setCursor = _useState4[1];

  const items = children.reduce((acc, child) => {
    if (child.type === OptGroup) {
      return acc.concat(child.props.children);
    } else if (child) {
      return acc.concat([child]);
    } else {
      return acc;
    }
  }, []);
  useKeypress(stdin, (data, key) => {
    if (key.name === 'up') {
      setCursor(cursor === 0 ? items.length && items.length - 1 : cursor - 1);
    } else if (key.name === 'down') {
      setCursor((cursor + 1) % items.length);
    } else if (data === ' ' && items.length) {
      const val = items[cursor].props.value;

      if (selected.has(val)) {
        selected.delete(val);
      } else {
        selected.add(val);
      }

      setSelected(new Set(selected));
    } else if (key.name === 'return') {
      onSubmit([...selected]);
    }
  });

  function renderItem(item, i) {
    const cursorIcon = cursor === i ? cursorChar : ' ';
    const checkbox = selected.has(item.props.value) ? checkedChar : uncheckedChar;
    return _react.default.createElement(_ink.Box, {
      key: `${item.props.value}-box`
    }, cursorIcon, " ", checkbox, " ", item);
  }

  return _react.default.createElement(_ink.Box, {
    flexDirection: "column"
  }, children.filter(x => x).map((child, i) => {
    if (child.type === OptGroup) {
      return _react.default.createElement(_ink.Box, {
        key: i,
        flexDirection: 'column'
      }, _react.default.createElement(_ink.Text, {
        bold: true
      }, child.props.label), child.props.children.map(c => renderItem(c, items.indexOf(c))));
    } else {
      return renderItem(child, items.indexOf(child));
    }
  }));
}

function Option({
  selected,
  active,
  children
}) {
  return _react.default.createElement(_ink.Box, null, children);
}

function OptGroup({
  children
}) {
  return _react.default.createElement(_ink.Box, null, children);
}

function useKeypress(stdin, cb) {
  (0, _react.useEffect)(() => {
    stdin.on('keypress', cb);
    return () => {
      stdin.removeListener('keypress', cb);
    };
  });
}