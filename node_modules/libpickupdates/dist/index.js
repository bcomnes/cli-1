"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = PickUpdatesComponent;

var _ink = require("ink");

var _react = _interopRequireWildcard(require("react"));

var _updatePicker = _interopRequireDefault(require("./update-picker"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const STATES = {
  init: 'init',
  pickUpdates: 'pick-updates',
  updating: 'updating',
  updated: 'updated',
  alreadyUpToDate: 'already-up-to-date'
};

function PickUpdatesComponent({
  stdin,
  onDone,
  unicode
}) {
  const _useState = (0, _react.useState)(STATES.init),
        _useState2 = _slicedToArray(_useState, 2),
        state = _useState2[0],
        setState = _useState2[1];

  const _useState3 = (0, _react.useState)([{
    name: 'lodash',
    wanted: '1.2.3',
    latest: '1.2.3',
    current: '1.2.0'
  }, {
    name: 'libnpm',
    current: 'MISSING',
    wanted: '1.0.0',
    latest: '1.2.0'
  }]),
        _useState4 = _slicedToArray(_useState3, 2),
        outdated = _useState4[0],
        setOutdated = _useState4[1];

  const _useState5 = (0, _react.useState)(null),
        _useState6 = _slicedToArray(_useState5, 2),
        updated = _useState6[0],
        setUpdated = _useState6[1];

  function updateDeps(names) {
    setUpdated(names);
    setState(STATES.updating);
  }

  if (state === STATES.init) {
    setTimeout(() => {
      if (outdated.length) {
        setState(STATES.pickUpdates);
      } else {
        setState(STATES.alreadyUpToDate);
      }
    }, 2000);
    return _react.default.createElement(_ink.Text, null, "Loading...");
  } else if (state === STATES.pickUpdates) {
    return _react.default.createElement(_updatePicker.default, {
      outdated: outdated,
      stdin: stdin,
      unicode: unicode,
      onSubmit: updateDeps
    });
  } else if (state === STATES.alreadyUpToDate) {
    setImmediate(onDone);
    return _react.default.createElement(_ink.Text, null, "Already up to date!");
  } else if (state === STATES.updating) {
    setTimeout(() => setState(STATES.updated), 2000);
    return _react.default.createElement(_ink.Text, null, "Installing updated deps...");
  } else if (state === STATES.updated) {
    setImmediate(onDone);
    return _react.default.createElement(_ink.Text, null, "Updated deps: ", updated.join(', '));
  }
}